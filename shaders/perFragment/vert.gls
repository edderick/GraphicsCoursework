#version 330 core 

precision highp float;

in vec3 in_Position; 
in vec3 in_Normal; 
in vec2 in_UV;
in uint in_Material_Num;

uniform mat4 m;
uniform mat4 v;
uniform mat4 p;

uniform mat4 mv;
uniform mat4 mvp;

uniform int num_of_light_sources;
uniform vec4 light_position[5];

out vec4 camera_normal;
out vec4 camera_direction;
out vec4 camera_light_direction;
//out float distance; 
out vec2 UV;
flat out uint materialNum;

out float gl_ClipDistance[1];

void main(void) {
	camera_normal = normalize(mv * vec4(in_Normal, 0.0));
	camera_light_direction = normalize(v * (light_position[0] -  m * vec4(in_Position, 1.f)));
	camera_direction = normalize(mv  * vec4(in_Position, 1.0));
	//distance = length(light_position[0] - vec4(in_Position, 1.0));

		
	gl_Position = mvp * vec4(in_Position, 1.0);
	UV = in_UV;
	materialNum = in_Material_Num;

	gl_ClipDistance[0] = 1;

}
