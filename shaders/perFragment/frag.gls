#version 330 core

precision highp float; 

in vec4 ex_Color;
in vec4 camera_normal;
in vec4 camera_light_direction;
in vec4 camera_direction;

in float distance;

out vec4 gl_FragColor; 

const float light_power = 2.f;

uniform vec3 in_ambient_color;
uniform vec3 in_diffuse_color;
uniform vec3 in_specular_color;

void main(void) {
	vec4 ambient = vec4(in_ambient_color.xyz,1.0) ;

	vec4 diffuse
		= light_power  * vec4(in_diffuse_color.xyz, 1.0) * clamp(dot(camera_normal, camera_light_direction),0,1) ;//  (distance * distance);	

	
	vec4 specular;

	if(dot(camera_light_direction, camera_normal) < 0.0){
		specular = vec4(0,0,0,0);
	} else {
		vec4 reflection = normalize(reflect(camera_light_direction, camera_normal));

		specular = light_power * vec4(in_specular_color.xyz, 1.0)  * pow(clamp(dot(camera_direction, reflection), 0, 1), 1) ;//  (distance * distance);
	}
	gl_FragColor = specular + diffuse + ambient ;

}
