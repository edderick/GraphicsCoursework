#version 330 core

precision highp float; 

in vec4 camera_normal;
in vec4 camera_light_direction;
in vec4 camera_direction;

//in float distance;

in vec2 UV;

out vec4 gl_FragColor; 

const float light_power = 0.5f;

uniform vec3 in_ambient_color;
uniform vec3 in_diffuse_color;
uniform vec3 in_specular_color;

uniform sampler2D AmbientSampler;
uniform sampler2D DiffuseSampler;
uniform sampler2D SpecularSampler;

uniform int ambient_mode; 
uniform int diffuse_mode;
uniform int specular_mode;

const int OFF = 0;
const int COLOR = 1;
const int TEXTURE = 2;
const int BLEND = 3;

void main(void) {

	//IF ambient_mode == OFF:
	vec4 ambient = vec4(0,0,0,1);

	if (ambient_mode == COLOR) {
		ambient = vec4(in_ambient_color.xyz,1.0) ;
	} else if(ambient_mode == TEXTURE) {
		ambient = texture(AmbientSampler, UV) * vec4(0.5,0.5,0.5,1);
	} else if (ambient_mode == BLEND) {
		ambient = vec4(in_ambient_color.xyz,1.0) * texture(AmbientSampler, UV);
	}

	//IF diffuse_mode == OFF:
	vec4 diffuse = vec4(0,0,0,1); // /(distance/distance);

	if (diffuse_mode == COLOR){
		diffuse = light_power  * vec4(in_diffuse_color.xyz, 1.0) * clamp(dot(camera_normal, camera_light_direction),0,1);	
	} else if (diffuse_mode == TEXTURE) {		
		diffuse = light_power  * texture(DiffuseSampler, UV) * clamp(dot(camera_normal, camera_light_direction),0,1);	
	} else if (diffuse_mode == BLEND) {
		diffuse = light_power  * texture(DiffuseSampler, UV) * vec4(in_diffuse_color.xyz, 1.0) 
		        * clamp(dot(camera_normal, camera_light_direction),0,1);	
	}
	
	
	vec4 specular;

	if(dot(camera_light_direction, camera_normal) < 0.0){
		specular = vec4(0,0,0,0);
	} else {
		vec4 reflection = normalize(reflect(camera_light_direction, camera_normal));

		if (specular_mode == COLOR) {
			specular = light_power * vec4(in_specular_color.xyz, 1.)  * pow(clamp(dot(camera_direction, reflection), 0, 1), 1);
		} else if (specular_mode == TEXTURE) {
			specular = light_power * texture(SpecularSampler, UV) * pow(clamp(dot(camera_direction, reflection), 0, 1), 1) ;
		} else if (specular_mode == BLEND) {
			specular = light_power * vec4(in_specular_color.xyz, 1.) *  texture(SpecularSampler, UV) 
				 * pow(clamp(dot(camera_direction, reflection), 0, 1), 1) ;
		}
	}

	gl_FragColor =  diffuse + ambient;
}
