#version 330 core 

//TODO find out if this is needed
precision highp float;

in vec3 in_Position; 
in vec3 in_Normal; 

//TODO make in
const vec4 in_Color = vec4(1.f, 0.f, 0.f, 1.f);

uniform mat4 m;
uniform mat4 v;
uniform mat4 p;

uniform mat4 mv;
uniform mat4 mvp;

//TODO make uniform
const vec4 light_position = vec4(0.f, 0.f, 5.f, 1.f);

out vec4 ex_Color; 
out vec4 camera_normal;
out vec4 camera_direction;
out vec4 camera_light_direction;
out float distance; 

const float light_power = 2.f;


void main(void) {

	gl_Position = mvp * vec4(in_Position, 1.0);

	camera_normal = normalize(mv * vec4(in_Normal, 0.0));

	camera_light_direction = normalize(v * (light_position -  m * vec4(in_Position, 1.f)));

	camera_direction = normalize(mv  * vec4(in_Position, 1.0));

	ex_Color = in_Color;

	//distance = length(light_position - vec4(in_Position, 1.0));

	vec4 ambient = vec4(ex_Color.xyz,1.0) * vec4(.1,.1,.1,1.);

	vec4 diffuse
		= light_power *  vec4(0.5, 0.5, 0.5, 1.) * ex_Color * dot(camera_normal, camera_light_direction) ;//  (distance * distance);    

	vec4 reflection = reflect(camera_light_direction, camera_normal);

	vec4 specular 
		= light_power * vec4(0.5,0.5,0.5,1.) * pow(clamp(dot(camera_direction, reflection), 0, 1), 1) ;//  (distance * distance);

	ex_Color = specular + diffuse + ambient ;
	
}
